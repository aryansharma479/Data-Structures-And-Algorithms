class Solution 
{
public:
    bool searchInRow(vector<vector<int>>& mat, int target,int row)
    {
        int n=mat[0].size();
        int st=0;
        int end=n-1;
        while(st<=end)
        {
            int mid=st+(end-st)/2;
            if(target==mat[row][mid])
            {
                return true;
            }
            else if(target>mat[row][mid])
            {
                //right half
                st=mid+1;
            }
            else
            {
                //left half
                end=mid-1;
            }
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& mat, int target) 
    {
        int m=mat.size(); //no.of rows
        int n=mat[0].size(); //no.of cols
        int sr=0; //start row
        int er=m-1; //ending row
        while(sr<=er)
        {
            int midrow=sr+(er-sr)/2;
            if(target>=mat[midrow][0]&&target<=mat[midrow][n-1])
            {
                //found the row
                return searchInRow(mat,target,midrow);
            }
            else if(target>=mat[midrow][n-1])
            {
                //downward row
                sr=midrow+1;
            }
            else{
                //upward row
                er=midrow-1;
            }
        }
        return false;
    }

};
